{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1027,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import time\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder,KBinsDiscretizer,OneHotEncoder\n",
    "from sklearn import metrics\n",
    "from sklearn.model_selection import train_test_split, KFold\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "from datetime import timedelta\n",
    "from catboost import CatBoostClassifier\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "seed = np.random.seed(8675309)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1028,
   "metadata": {},
   "outputs": [],
   "source": [
    "def auc(m, train, test): \n",
    "    return (metrics.roc_auc_score(y_train,m.predict_proba(train)[:,1]),\n",
    "                            metrics.roc_auc_score(y_test,m.predict_proba(test)[:,1]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1029,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('WFS_Training.csv', na_values = 'null')#,nrows=30000)\n",
    "public_test = pd.read_csv('WFS_TestFeatures.csv', na_values = 'null')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1030,
   "metadata": {},
   "outputs": [],
   "source": [
    "score_cols = [\n",
    "   # 'commute_distance',\n",
    "    #'shift_duration',\n",
    "    #'nbr_shift_day',    \n",
    "   # 'distdur'\n",
    "]\n",
    "cat_cols = [\n",
    "           # 'app_esl_status',\n",
    "           # 'cand_education',\n",
    "           # 'cand_assess_overall_score',\n",
    "           # 'shift_code',\n",
    "            #'shift_code_group',\n",
    "            #'shift_days_of_week',\n",
    "            #'shift_emp_class',\n",
    "            #'shift_startday',\n",
    "            #'shift_type',\n",
    "            #'shift_schedule_type',\n",
    "            #'shift_start_time_group'\n",
    "           ]\n",
    "feat_cols = [\n",
    "           'appointment_nbr',\n",
    " #          'application_per_candidate',\n",
    " #           'day_to_first_app',\n",
    "            'appointment_for_app',\n",
    " #           'nbr_application'\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1031,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['create_year'] = pd.DatetimeIndex(train.app_created_date).year\n",
    "train['create_month'] = pd.DatetimeIndex(train.app_created_date).month\n",
    "train['create_day'] = pd.DatetimeIndex(train.app_created_date).day\n",
    "\n",
    "train['app_year'] = pd.DatetimeIndex(train.appt_1_date).year\n",
    "train['app_month'] = pd.DatetimeIndex(train.appt_1_date).month\n",
    "train['app_day'] = pd.DatetimeIndex(train.appt_1_date).day\n",
    "train['app_quarter'] = pd.DatetimeIndex(train.appt_1_date).quarter\n",
    "train['app_weekday'] = pd.DatetimeIndex(train.appt_1_date).weekday\n",
    "train['app_weekend'] = (train['app_weekday'] // 5 == 1).astype(float)\n",
    "\n",
    "\n",
    "public_test['create_year'] = pd.DatetimeIndex(public_test.app_created_date).year\n",
    "public_test['create_month'] = pd.DatetimeIndex(public_test.app_created_date).month\n",
    "public_test['create_day'] = pd.DatetimeIndex(public_test.app_created_date).day\n",
    "\n",
    "public_test['app_year'] = pd.DatetimeIndex(public_test.appt_1_date).year\n",
    "public_test['app_month'] = pd.DatetimeIndex(public_test.appt_1_date).month\n",
    "public_test['app_day'] = pd.DatetimeIndex(public_test.appt_1_date).day\n",
    "public_test['app_quarter'] = pd.DatetimeIndex(public_test.appt_1_date).quarter\n",
    "public_test['app_weekday'] = pd.DatetimeIndex(public_test.appt_1_date).weekday\n",
    "public_test['app_weekend'] = (public_test['app_weekday'] // 5 == 1).astype(float)\n",
    "\n",
    "\n",
    "date_cols = [\n",
    "#'create_year', \n",
    "#'create_month', \n",
    "#'create_day',\n",
    "#'app_year',\n",
    "'app_month',\n",
    "'app_day',\n",
    "#'app_quarter',\n",
    "#'app_weekday',\n",
    "#'app_weekend'\n",
    "]\n",
    "\n",
    "#cat_cols = cat_cols + date_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1032,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['appointment_for_app'] = train.groupby('app_id')['cand_id'].transform('count')\n",
    "public_test['appointment_for_app'] = public_test.groupby('app_id')['cand_id'].transform('count')\n",
    "#this should be groupd by app_id but cand_id has better effect\n",
    "train['appointment_nbr'] = train.sort_values(['ID'], ascending=[True]) \\\n",
    "             .groupby(['cand_id']).cumcount() + 1\n",
    "public_test['appointment_nbr'] = public_test.sort_values(['ID'], ascending=[True]) \\\n",
    "             .groupby(['cand_id']).cumcount() + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1033,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\napplication_per_candidate = pd.DataFrame(train.groupby('cand_id').app_id.nunique())\\napplication_per_candidate.columns = ['nbr_application']\\ntrain = pd.merge(left=train,right=application_per_candidate, left_on='cand_id', right_on='cand_id')\\n\\napplication_per_candidate = pd.DataFrame(public_test.groupby('cand_id').app_id.nunique())\\napplication_per_candidate.columns = ['nbr_application']\\npublic_test = pd.merge(left=public_test,right=application_per_candidate, left_on='cand_id', right_on='cand_id')\\n\""
      ]
     },
     "execution_count": 1033,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#commenting out also this because it doesn't like it\n",
    "'''\n",
    "application_per_candidate = pd.DataFrame(train.groupby('cand_id').app_id.nunique())\n",
    "application_per_candidate.columns = ['nbr_application']\n",
    "train = pd.merge(left=train,right=application_per_candidate, left_on='cand_id', right_on='cand_id')\n",
    "\n",
    "application_per_candidate = pd.DataFrame(public_test.groupby('cand_id').app_id.nunique())\n",
    "application_per_candidate.columns = ['nbr_application']\n",
    "public_test = pd.merge(left=public_test,right=application_per_candidate, left_on='cand_id', right_on='cand_id')\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1034,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>app_id</th>\n",
       "      <th>cand_id</th>\n",
       "      <th>app_created_date</th>\n",
       "      <th>app_esl_status</th>\n",
       "      <th>appt_1_date</th>\n",
       "      <th>cand_education</th>\n",
       "      <th>cand_assess_overall_score</th>\n",
       "      <th>commute_distance</th>\n",
       "      <th>shift_code</th>\n",
       "      <th>...</th>\n",
       "      <th>create_month</th>\n",
       "      <th>create_day</th>\n",
       "      <th>app_year</th>\n",
       "      <th>app_month</th>\n",
       "      <th>app_day</th>\n",
       "      <th>app_quarter</th>\n",
       "      <th>app_weekday</th>\n",
       "      <th>app_weekend</th>\n",
       "      <th>appointment_for_app</th>\n",
       "      <th>appointment_nbr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>78373</th>\n",
       "      <td>146448</td>\n",
       "      <td>App-17408699</td>\n",
       "      <td>CID000153077</td>\n",
       "      <td>2019-02-18T00:00:00.0000000</td>\n",
       "      <td>NonESL</td>\n",
       "      <td>2019-03-12T09:30:00.0000000</td>\n",
       "      <td>Undergraduate</td>\n",
       "      <td>High</td>\n",
       "      <td>10.16</td>\n",
       "      <td>PT3649</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           ID        app_id       cand_id             app_created_date  \\\n",
       "78373  146448  App-17408699  CID000153077  2019-02-18T00:00:00.0000000   \n",
       "\n",
       "      app_esl_status                  appt_1_date cand_education  \\\n",
       "78373         NonESL  2019-03-12T09:30:00.0000000  Undergraduate   \n",
       "\n",
       "      cand_assess_overall_score  commute_distance shift_code  ...  \\\n",
       "78373                      High             10.16     PT3649  ...   \n",
       "\n",
       "      create_month create_day app_year app_month app_day app_quarter  \\\n",
       "78373            2         18   2019.0       3.0    12.0         1.0   \n",
       "\n",
       "      app_weekday  app_weekend  appointment_for_app appointment_nbr  \n",
       "78373         1.0          0.0                    1               1  \n",
       "\n",
       "[1 rows x 32 columns]"
      ]
     },
     "execution_count": 1034,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train.cand_id =='CID000153077']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1035,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = train.groupby('cand_id').app_id.nunique()\n",
    "test.columns = ['cand_id', 'nbr_app']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1036,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['day_to_first_app'] = (pd.DatetimeIndex(train.appt_1_date) - pd.DatetimeIndex(train.app_created_date)).days\n",
    "public_test['day_to_first_app'] = (pd.DatetimeIndex(public_test.appt_1_date) - pd.DatetimeIndex(public_test.app_created_date)).days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1037,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mean Scores###\n",
    "train = train.fillna(train[score_cols].mean())\n",
    "public_test = public_test.fillna(public_test[score_cols].mean())\n",
    "### not specified for categorical ###\n",
    "ns_value = '1500'\n",
    "train[cat_cols] = train[cat_cols].fillna(ns_value)\n",
    "public_test[cat_cols] = public_test[cat_cols].fillna(ns_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1038,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train[date_cols] = train[date_cols].astype(int)\n",
    "#public_test[date_cols] = public_test[date_cols].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1039,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Cannot convert non-finite values (NA or inf) to integer",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1039-167af07a7dbe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'shift_start_time_group'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'shift_start_time_group'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mpublic_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'shift_start_time_group'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpublic_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'shift_start_time_group'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda2/lib/python2.7/site-packages/pandas/core/generic.pyc\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors, **kwargs)\u001b[0m\n\u001b[1;32m   5689\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5690\u001b[0m             new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors,\n\u001b[0;32m-> 5691\u001b[0;31m                                          **kwargs)\n\u001b[0m\u001b[1;32m   5692\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5693\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda2/lib/python2.7/site-packages/pandas/core/internals/managers.pyc\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, **kwargs)\u001b[0m\n\u001b[1;32m    529\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    530\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 531\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'astype'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    532\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    533\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda2/lib/python2.7/site-packages/pandas/core/internals/managers.pyc\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, axes, filter, do_integrity_check, consolidate, **kwargs)\u001b[0m\n\u001b[1;32m    393\u001b[0m                                             copy=align_copy)\n\u001b[1;32m    394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 395\u001b[0;31m             \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    396\u001b[0m             \u001b[0mresult_blocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_extend_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapplied\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_blocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    397\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda2/lib/python2.7/site-packages/pandas/core/internals/blocks.pyc\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors, values, **kwargs)\u001b[0m\n\u001b[1;32m    532\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'raise'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    533\u001b[0m         return self._astype(dtype, copy=copy, errors=errors, values=values,\n\u001b[0;32m--> 534\u001b[0;31m                             **kwargs)\n\u001b[0m\u001b[1;32m    535\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    536\u001b[0m     def _astype(self, dtype, copy=False, errors='raise', values=None,\n",
      "\u001b[0;32m/anaconda2/lib/python2.7/site-packages/pandas/core/internals/blocks.pyc\u001b[0m in \u001b[0;36m_astype\u001b[0;34m(self, dtype, copy, errors, values, **kwargs)\u001b[0m\n\u001b[1;32m    631\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    632\u001b[0m                     \u001b[0;31m# _astype_nansafe works fine with 1-d only\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 633\u001b[0;31m                     \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    634\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    635\u001b[0m                 \u001b[0;31m# TODO(extension)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda2/lib/python2.7/site-packages/pandas/core/dtypes/cast.pyc\u001b[0m in \u001b[0;36mastype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m    674\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    675\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 676\u001b[0;31m             raise ValueError('Cannot convert non-finite values (NA or inf) to '\n\u001b[0m\u001b[1;32m    677\u001b[0m                              'integer')\n\u001b[1;32m    678\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Cannot convert non-finite values (NA or inf) to integer"
     ]
    }
   ],
   "source": [
    "train['shift_start_time_group'] = train['shift_start_time_group'].astype(int)\n",
    "public_test['shift_start_time_group'] = public_test['shift_start_time_group'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1040,
   "metadata": {},
   "outputs": [],
   "source": [
    "for c in cat_cols:\n",
    "    le = LabelEncoder()\n",
    "    unique_elements = list(set(train[c].values.tolist() + public_test[c].values.tolist()))\n",
    "    le.fit(unique_elements)\n",
    "    train[c] = le.transform(train[c])\n",
    "    public_test[c] = le.transform(public_test[c])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1041,
   "metadata": {},
   "outputs": [],
   "source": [
    "X= train.loc[:, train.columns != 'nhenoshow_flag']\n",
    "y= train.nhenoshow_flag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1042,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = X[feat_cols + score_cols + cat_cols + date_cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1043,
   "metadata": {},
   "outputs": [],
   "source": [
    "train, test, y_train, y_test = train_test_split(X, y,\n",
    "                                                random_state=10, test_size=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1044,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 1044,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cal_feat = [train.columns.get_loc(c) for c in cat_cols]\n",
    "cal_feat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1062,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate set to 0.5\n",
      "0:\ttotal: 15.8ms\tremaining: 933ms\n",
      "1:\ttotal: 28.3ms\tremaining: 821ms\n",
      "2:\ttotal: 40.5ms\tremaining: 770ms\n",
      "3:\ttotal: 55.1ms\tremaining: 771ms\n",
      "4:\ttotal: 67.9ms\tremaining: 747ms\n",
      "5:\ttotal: 79.9ms\tremaining: 719ms\n",
      "6:\ttotal: 93ms\tremaining: 704ms\n",
      "7:\ttotal: 106ms\tremaining: 689ms\n",
      "8:\ttotal: 118ms\tremaining: 669ms\n",
      "9:\ttotal: 130ms\tremaining: 651ms\n",
      "10:\ttotal: 143ms\tremaining: 637ms\n",
      "11:\ttotal: 156ms\tremaining: 624ms\n",
      "12:\ttotal: 169ms\tremaining: 610ms\n",
      "13:\ttotal: 181ms\tremaining: 594ms\n",
      "14:\ttotal: 197ms\tremaining: 591ms\n",
      "15:\ttotal: 221ms\tremaining: 608ms\n",
      "16:\ttotal: 239ms\tremaining: 604ms\n",
      "17:\ttotal: 259ms\tremaining: 603ms\n",
      "18:\ttotal: 277ms\tremaining: 598ms\n",
      "19:\ttotal: 295ms\tremaining: 590ms\n",
      "20:\ttotal: 321ms\tremaining: 596ms\n",
      "21:\ttotal: 340ms\tremaining: 588ms\n",
      "22:\ttotal: 358ms\tremaining: 576ms\n",
      "23:\ttotal: 372ms\tremaining: 558ms\n",
      "24:\ttotal: 384ms\tremaining: 537ms\n",
      "25:\ttotal: 396ms\tremaining: 518ms\n",
      "26:\ttotal: 426ms\tremaining: 521ms\n",
      "27:\ttotal: 443ms\tremaining: 507ms\n",
      "28:\ttotal: 458ms\tremaining: 489ms\n",
      "29:\ttotal: 474ms\tremaining: 474ms\n",
      "30:\ttotal: 487ms\tremaining: 456ms\n",
      "31:\ttotal: 500ms\tremaining: 438ms\n",
      "32:\ttotal: 515ms\tremaining: 421ms\n",
      "33:\ttotal: 526ms\tremaining: 402ms\n",
      "34:\ttotal: 542ms\tremaining: 387ms\n",
      "35:\ttotal: 555ms\tremaining: 370ms\n",
      "36:\ttotal: 573ms\tremaining: 356ms\n",
      "37:\ttotal: 591ms\tremaining: 342ms\n",
      "38:\ttotal: 633ms\tremaining: 341ms\n",
      "39:\ttotal: 663ms\tremaining: 331ms\n",
      "40:\ttotal: 684ms\tremaining: 317ms\n",
      "41:\ttotal: 703ms\tremaining: 301ms\n",
      "42:\ttotal: 723ms\tremaining: 286ms\n",
      "43:\ttotal: 745ms\tremaining: 271ms\n",
      "44:\ttotal: 763ms\tremaining: 254ms\n",
      "45:\ttotal: 780ms\tremaining: 237ms\n",
      "46:\ttotal: 804ms\tremaining: 222ms\n",
      "47:\ttotal: 851ms\tremaining: 213ms\n",
      "48:\ttotal: 883ms\tremaining: 198ms\n",
      "49:\ttotal: 900ms\tremaining: 180ms\n",
      "50:\ttotal: 920ms\tremaining: 162ms\n",
      "51:\ttotal: 939ms\tremaining: 144ms\n",
      "52:\ttotal: 950ms\tremaining: 125ms\n",
      "53:\ttotal: 967ms\tremaining: 107ms\n",
      "54:\ttotal: 984ms\tremaining: 89.5ms\n",
      "55:\ttotal: 1s\tremaining: 71.5ms\n",
      "56:\ttotal: 1.04s\tremaining: 55ms\n",
      "57:\ttotal: 1.07s\tremaining: 36.8ms\n",
      "58:\ttotal: 1.08s\tremaining: 18.4ms\n",
      "59:\ttotal: 1.11s\tremaining: 0us\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9306953004630347, 0.9320275630163177)"
      ]
     },
     "execution_count": 1062,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = CatBoostClassifier(eval_metric=\"AUC\",\n",
    "                         depth=3,  \n",
    "                         iterations= 60,\n",
    "                         #l2_leaf_reg=5,\n",
    "                         #early_stopping_rounds = True,\n",
    "                         #od_wait = 10,\n",
    "                         #class_weights=[1, 1])#,\n",
    "                         #learning_rate= 0.5, l2_leaf_reg= 9\n",
    "                        )\n",
    "\n",
    "clf.fit(train,y_train,cal_feat)\n",
    "auc(clf, train, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1046,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>appointment_for_app</td>\n",
       "      <td>88.899680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>appointment_nbr</td>\n",
       "      <td>4.990667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>app_month</td>\n",
       "      <td>3.479724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>app_day</td>\n",
       "      <td>2.629930</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Feature      Score\n",
       "1  appointment_for_app  88.899680\n",
       "0      appointment_nbr   4.990667\n",
       "2            app_month   3.479724\n",
       "3              app_day   2.629930"
      ]
     },
     "execution_count": 1046,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from catboost import Pool\n",
    "feature_score = pd.DataFrame(list(zip(X.dtypes.index, \n",
    "                             clf.get_feature_importance(Pool(X, label=y, cat_features=cal_feat)))),\n",
    "                columns=['Feature','Score'])\n",
    "\n",
    "feature_score = feature_score.sort_values(by='Score', ascending=False, inplace=False, kind='quicksort', na_position='last')\n",
    "feature_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1047,
   "metadata": {},
   "outputs": [],
   "source": [
    "cal_feat = [public_test.columns.get_loc(c) for c in cat_cols]\n",
    "cal_feat\n",
    "predictions = predictions[feat_cols + score_cols + cat_cols + date_cols+ ['ID']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1048,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = public_test.copy()\n",
    "predictions = predictions[feat_cols + score_cols + cat_cols + date_cols+ ['ID']]\n",
    "#predictions_cat_prob =  clf.predict_proba(predictions.loc[:, predictions.columns != 'ID'].values)\n",
    "predictions['nhenoshow_flag']=  [l[1] for l in clf.predict(predictions.loc[:, \n",
    "                                            predictions.columns != 'ID'].values,\n",
    "                                            prediction_type= 'Probability')]\n",
    "predictions[['ID','nhenoshow_flag']].to_csv('guessTempCat.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1049,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Overall accuracy of Light GBM model on split test:', 0.8622089875473741)\n"
     ]
    }
   ],
   "source": [
    "predictions_cat_prob = clf.predict(test)\n",
    "acc_lgbm = accuracy_score(y_test,predictions_cat_prob)\n",
    "print('Overall accuracy of Light GBM model on split test:', acc_lgbm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1050,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"whitegrid\")\n",
    "\n",
    "#Print Confusion Matrix\n",
    "plt.figure()\n",
    "cm = confusion_matrix(y_test, predictions_cat_prob)\n",
    "labels = ['No Default', 'Default']\n",
    "plt.figure(figsize=(8,6))\n",
    "sns.heatmap(cm, xticklabels = labels, yticklabels = labels, annot = True, fmt='d', cmap=\"Blues\", vmin = 0.2);\n",
    "plt.title('Confusion Matrix')\n",
    "plt.ylabel('True Class')\n",
    "plt.xlabel('Predicted Class')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1051,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({0.0: 12811, 1.0: 38905})"
      ]
     },
     "execution_count": 1051,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import Counter\n",
    "Counter(predictions_cat_prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1052,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({0L: 43517, 1L: 163346})"
      ]
     },
     "execution_count": 1052,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import Counter\n",
    "Counter(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
